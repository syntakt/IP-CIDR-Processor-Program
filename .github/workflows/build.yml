name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-10] #ubuntu-latest,
        python-version: ['3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests>=2.28.1 PyYAML>=6.0 pyinstaller>=5.0
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
      
      - name: Update spec file for current OS
        run: |
          if [ "${{ matrix.os }}" = "windows-10" ]; then
            sed -i 's/os_name = .*/os_name = "windows-10"/g' ip_cidr_processor.spec
          else
            sed -i 's/os_name = .*/os_name = "ubuntu-latest"/g' ip_cidr_processor.spec
          fi
        shell: bash
      
      - name: Build executable
        run: |
          pyinstaller ip_cidr_processor.spec
        shell: bash
      
      - name: List build artifacts (Windows)
        if: matrix.os == 'windows-10'
        run: Get-ChildItem dist/
        shell: pwsh
      
      - name: List build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ls -la dist/
        shell: bash
      
      - name: Create version file
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          if [ "$VERSION" == "main" ] || [ "$VERSION" == "master" ]; then
            VERSION=$(date +'%Y%m%d%H%M')
          fi
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Ensure dist directory exists
          mkdir -p dist
          
          # Create platform-specific version files
          if [ "${{ matrix.os }}" = "windows-10" ]; then
            echo "$VERSION" > dist/windows_version.txt
          else
            echo "$VERSION" > dist/linux_version.txt
          fi
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ip_cidr_processor_${{ matrix.os }}
          path: dist/
          if-no-files-found: warn

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set version from input or tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
            # Create tag for manual dispatch
            git tag "v$VERSION"
            git push origin "v$VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using tag version: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      
      - name: Display structure of downloaded files
        run: ls -R artifacts/
      
      - name: Create single version file
        run: |
          echo "${{ env.VERSION }}" > artifacts/version.txt
      
      - name: Setup Git config
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Prepare release files
        run: |
          VERSION=${{ env.VERSION }}
          
          # Create releases directory
          mkdir -p releases/v$VERSION
          
          # Copy artifacts
          cp -r artifacts/* releases/v$VERSION/ || true
          
          # Create release info
          cat > releases/v$VERSION/RELEASE_INFO.md << EOF
          # Release v$VERSION
          
          Released on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Tag: v$VERSION
          Commit: ${{ github.sha }}
          Trigger: ${{ github.event_name }}
          
          ## Build Information
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - Actor: ${{ github.actor }}
          
          ## Custom Release Notes
          ${{ github.event.inputs.release_notes }}
          
          ## Artifacts
          EOF
          
          # List actual files in artifacts
          echo "Available files:" >> releases/v$VERSION/RELEASE_INFO.md
          ls -la artifacts/ >> releases/v$VERSION/RELEASE_INFO.md || echo "No artifacts found" >> releases/v$VERSION/RELEASE_INFO.md
          
          # Update latest release pointer
          echo "v$VERSION" > LATEST_RELEASE
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> LATEST_RELEASE
          echo "https://github.com/${{ github.repository }}/releases/tag/v$VERSION" >> LATEST_RELEASE
      
      - name: Commit and push release files
        run: |
          # Check if there are changes to commit
          git add releases/v${{ env.VERSION }}/
          git add LATEST_RELEASE
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📦 Add release artifacts for v${{ env.VERSION }}"
            git push origin main
          fi
      
      - name: Create GitHub Release
        id: create_release
        if: github.event.inputs.create_release != 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: IP CIDR Processor v${{ env.VERSION }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          body: |
            🚀 **Release v${{ env.VERSION }}**
            
            Built on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            Commit: ${{ github.sha }}
            Trigger: ${{ github.event_name }}
            
            ${{ github.event.inputs.release_notes }}
            
            ## Download
            Choose the appropriate executable for your platform:
            
            ### Files in this release:
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify release creation
        run: |
          echo "✅ Release process completed!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"
          echo "📁 Release files committed to repository"
          echo "🏷️  Tag: v${{ env.VERSION }}"
          echo "📋 Files in repository:"
          ls -la releases/v${{ env.VERSION }}/ || echo "Release directory not found"
